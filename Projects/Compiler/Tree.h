/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : Tree.g
 *     -                            On : 2009-11-25 13:46:33
 *     -           for the tree parser : TreeTreeParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The tree parser Tree has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pTree, which is returned from a call to TreeNew().
 *
 * The methods in pTree are  as follows:
 *
 *  - void      pTree->entry(pTree)
 *  - void      pTree->continuation(pTree)
 *  - void      pTree->statement(pTree)
 *  - void      pTree->block(pTree)
 *  - void      pTree->expression(pTree)
 *  - void      pTree->ident(pTree)
 *  - void      pTree->arguments(pTree)
 *  - void      pTree->ident_list(pTree)
 *  - void      pTree->literal(pTree)
 *  - Tree_integerLiteral_return      pTree->integerLiteral(pTree)
 *  - Tree_booleanLiteral_return      pTree->booleanLiteral(pTree)
 *  - void      pTree->operation(pTree)
 *  - void      pTree->rpn_token(pTree)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_Tree_H
#define _Tree_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct Tree_Ctx_struct Tree, * pTree;



	#include "Precompiled.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif
typedef struct Tree_integerLiteral_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    Tree_integerLiteral_return;

typedef struct Tree_booleanLiteral_return_struct
{
    pANTLR3_BASE_TREE       start;
    pANTLR3_BASE_TREE       stop;   
}
    Tree_booleanLiteral_return;



/* globalAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the CodeSequence scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  Tree_CodeSequencePush().
 */
typedef struct  Tree_CodeSequence_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct Tree_CodeSequence_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    Om::Pointer<Om::Vector> code;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    Tree_CodeSequence_SCOPE, * pTree_CodeSequence_SCOPE;

/** Context tracking structure for Tree
 */
struct Tree_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_TREE_PARSER	    pTreeParser;
    /* globalAttributeScopeDef(scope)
     */
    /** Pointer to the  CodeSequence stack for use by pTree_CodeSequencePush()
     *  and pTree_CodeSequencePop()
     */
    pANTLR3_STACK pTree_CodeSequenceStack;
    ANTLR3_UINT32 pTree_CodeSequenceStack_limit;
    /** Pointer to the top of the stack for the global scope pTree_CodeSequenceStack
     */
    pTree_CodeSequence_SCOPE    (*pTree_CodeSequencePush)(struct Tree_Ctx_struct * ctx);
    pTree_CodeSequence_SCOPE    pTree_CodeSequenceTop;


     void (*entry)	(struct Tree_Ctx_struct * ctx);
     void (*continuation)	(struct Tree_Ctx_struct * ctx);
     void (*statement)	(struct Tree_Ctx_struct * ctx);
     void (*block)	(struct Tree_Ctx_struct * ctx);
     void (*expression)	(struct Tree_Ctx_struct * ctx);
     void (*ident)	(struct Tree_Ctx_struct * ctx);
     void (*arguments)	(struct Tree_Ctx_struct * ctx);
     void (*ident_list)	(struct Tree_Ctx_struct * ctx);
     void (*literal)	(struct Tree_Ctx_struct * ctx);
     Tree_integerLiteral_return (*integerLiteral)	(struct Tree_Ctx_struct * ctx);
     Tree_booleanLiteral_return (*booleanLiteral)	(struct Tree_Ctx_struct * ctx);
     void (*operation)	(struct Tree_Ctx_struct * ctx);
     void (*rpn_token)	(struct Tree_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct Tree_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pTree TreeNew         (pANTLR3_COMMON_TREE_NODE_STREAM instream);
ANTLR3_API pTree TreeNewSSD      (pANTLR3_COMMON_TREE_NODE_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the tree parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define FloatTypeSuffix      35
#define OctalLiteral      29
#define TRACE      23
#define EOF      -1
#define BREAK      22
#define Identifier      24
#define T__93      93
#define T__94      94
#define FIELD_ACCESS      5
#define T__91      91
#define T__92      92
#define T__90      90
#define COMMENT      42
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__139      139
#define T__138      138
#define T__137      137
#define T__136      136
#define T__80      80
#define T__81      81
#define QUOTED_RPN_SEQUENCE      13
#define T__82      82
#define T__83      83
#define LINE_COMMENT      43
#define IntegerTypeSuffix      33
#define ELSE      16
#define ARG_LIST      7
#define T__85      85
#define T__84      84
#define T__87      87
#define METHOD_CALL      4
#define ASSERT      17
#define T__140      140
#define T__86      86
#define T__89      89
#define T__88      88
#define IDENT_LIST      8
#define EMPTY      11
#define T__126      126
#define T__125      125
#define T__128      128
#define T__127      127
#define WS      41
#define T__71      71
#define T__72      72
#define T__129      129
#define T__70      70
#define FloatingPointLiteral      25
#define JavaIDDigit      40
#define T__76      76
#define FUNCTION_CALL      6
#define T__75      75
#define T__74      74
#define T__130      130
#define Letter      39
#define EscapeSequence      36
#define T__73      73
#define T__131      131
#define T__132      132
#define T__133      133
#define T__79      79
#define T__134      134
#define T__78      78
#define T__135      135
#define T__77      77
#define RPN_SEQUENCE      12
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define T__62      62
#define T__63      63
#define T__118      118
#define CharacterLiteral      26
#define T__119      119
#define T__116      116
#define T__117      117
#define T__114      114
#define T__115      115
#define T__124      124
#define T__123      123
#define Exponent      34
#define T__122      122
#define T__121      121
#define T__120      120
#define T__61      61
#define T__60      60
#define HexDigit      32
#define IF_ELSE      15
#define IF      14
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__107      107
#define T__108      108
#define T__109      109
#define T__103      103
#define T__59      59
#define T__104      104
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define EXISTS      18
#define LAMBDA      20
#define T__50      50
#define HexLiteral      28
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define CONTINUATION      19
#define T__102      102
#define T__101      101
#define T__100      100
#define DecimalLiteral      30
#define QuotedIdentifier      31
#define StringLiteral      27
#define DEBUG_BREAK      21
#define UnicodeEscape      37
#define BLOCK      10
#define ASSIGN      9
#define OctalEscape      38
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for Tree
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
