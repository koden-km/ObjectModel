/** \file
 *  This C header file was generated by $ANTLR version 3.1.3 Mar 17, 2009 19:23:44
 *
 *     -  From the grammar source file : Rho.g
 *     -                            On : 2009-11-25 13:46:24
 *     -                for the parser : RhoParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser RhoParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pRhoParser, which is returned from a call to RhoParserNew().
 *
 * The methods in pRhoParser are  as follows:
 *
 *  - RhoParser_entry_return      pRhoParser->entry(pRhoParser)
 *  - RhoParser_block_return      pRhoParser->block(pRhoParser)
 *  - RhoParser_blockStatement_return      pRhoParser->blockStatement(pRhoParser)
 *  - RhoParser_statement_return      pRhoParser->statement(pRhoParser)
 *  - RhoParser_if_block_return      pRhoParser->if_block(pRhoParser)
 *  - RhoParser_statementExpression_return      pRhoParser->statementExpression(pRhoParser)
 *  - RhoParser_nonWildcardTypeArguments_return      pRhoParser->nonWildcardTypeArguments(pRhoParser)
 *  - RhoParser_typeList_return      pRhoParser->typeList(pRhoParser)
 *  - RhoParser_packageOrTypeName_return      pRhoParser->packageOrTypeName(pRhoParser)
 *  - RhoParser_typeName_return      pRhoParser->typeName(pRhoParser)
 *  - RhoParser_type_return      pRhoParser->type(pRhoParser)
 *  - RhoParser_typeArguments_return      pRhoParser->typeArguments(pRhoParser)
 *  - RhoParser_typeArgument_return      pRhoParser->typeArgument(pRhoParser)
 *  - RhoParser_primitiveType_return      pRhoParser->primitiveType(pRhoParser)
 *  - RhoParser_literal_return      pRhoParser->literal(pRhoParser)
 *  - RhoParser_integerLiteral_return      pRhoParser->integerLiteral(pRhoParser)
 *  - RhoParser_booleanLiteral_return      pRhoParser->booleanLiteral(pRhoParser)
 *  - RhoParser_expressionList_return      pRhoParser->expressionList(pRhoParser)
 *  - RhoParser_expression_return      pRhoParser->expression(pRhoParser)
 *  - RhoParser_assignmentOperator_return      pRhoParser->assignmentOperator(pRhoParser)
 *  - RhoParser_conditionalExpression_return      pRhoParser->conditionalExpression(pRhoParser)
 *  - RhoParser_conditionalOrExpression_return      pRhoParser->conditionalOrExpression(pRhoParser)
 *  - RhoParser_conditionalAndExpression_return      pRhoParser->conditionalAndExpression(pRhoParser)
 *  - RhoParser_inclusiveOrExpression_return      pRhoParser->inclusiveOrExpression(pRhoParser)
 *  - RhoParser_exclusiveOrExpression_return      pRhoParser->exclusiveOrExpression(pRhoParser)
 *  - RhoParser_andExpression_return      pRhoParser->andExpression(pRhoParser)
 *  - RhoParser_equalityExpression_return      pRhoParser->equalityExpression(pRhoParser)
 *  - RhoParser_instanceOfExpression_return      pRhoParser->instanceOfExpression(pRhoParser)
 *  - RhoParser_relationalExpression_return      pRhoParser->relationalExpression(pRhoParser)
 *  - RhoParser_relationalOp_return      pRhoParser->relationalOp(pRhoParser)
 *  - RhoParser_shiftExpression_return      pRhoParser->shiftExpression(pRhoParser)
 *  - RhoParser_shiftOp_return      pRhoParser->shiftOp(pRhoParser)
 *  - RhoParser_additiveExpression_return      pRhoParser->additiveExpression(pRhoParser)
 *  - RhoParser_multiplicativeExpression_return      pRhoParser->multiplicativeExpression(pRhoParser)
 *  - RhoParser_unaryExpression_return      pRhoParser->unaryExpression(pRhoParser)
 *  - RhoParser_unaryExpressionNotPlusMinus_return      pRhoParser->unaryExpressionNotPlusMinus(pRhoParser)
 *  - RhoParser_selector_return      pRhoParser->selector(pRhoParser)
 *  - RhoParser_innerCreator_return      pRhoParser->innerCreator(pRhoParser)
 *  - RhoParser_castExpression_return      pRhoParser->castExpression(pRhoParser)
 *  - RhoParser_parExpression_return      pRhoParser->parExpression(pRhoParser)
 *  - RhoParser_primary_return      pRhoParser->primary(pRhoParser)
 *  - RhoParser_lambda_definition_return      pRhoParser->lambda_definition(pRhoParser)
 *  - RhoParser_capture_list_return      pRhoParser->capture_list(pRhoParser)
 *  - RhoParser_arg_list_return      pRhoParser->arg_list(pRhoParser)
 *  - RhoParser_ident_list_return      pRhoParser->ident_list(pRhoParser)
 *  - RhoParser_postfixExpression_return      pRhoParser->postfixExpression(pRhoParser)
 *  - RhoParser_creator_return      pRhoParser->creator(pRhoParser)
 *  - RhoParser_createdName_return      pRhoParser->createdName(pRhoParser)
 *  - RhoParser_identifierSuffix_return      pRhoParser->identifierSuffix(pRhoParser)
 *  - RhoParser_arguments_return      pRhoParser->arguments(pRhoParser)
 *  - RhoParser_rpn_block_return      pRhoParser->rpn_block(pRhoParser)
 *  - RhoParser_rpn_token_return      pRhoParser->rpn_token(pRhoParser)
 *  - RhoParser_continuation_return      pRhoParser->continuation(pRhoParser)
 *  - RhoParser_operation_return      pRhoParser->operation(pRhoParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_RhoParser_H
#define _RhoParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */



 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct RhoParser_Ctx_struct RhoParser, * pRhoParser;



	// this is included in parser.h


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct RhoParser_entry_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_entry_return;

typedef struct RhoParser_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_block_return;

typedef struct RhoParser_blockStatement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_blockStatement_return;

typedef struct RhoParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_statement_return;

typedef struct RhoParser_if_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_if_block_return;

typedef struct RhoParser_statementExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_statementExpression_return;

typedef struct RhoParser_nonWildcardTypeArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_nonWildcardTypeArguments_return;

typedef struct RhoParser_typeList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_typeList_return;

typedef struct RhoParser_packageOrTypeName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_packageOrTypeName_return;

typedef struct RhoParser_typeName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_typeName_return;

typedef struct RhoParser_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_type_return;

typedef struct RhoParser_typeArguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_typeArguments_return;

typedef struct RhoParser_typeArgument_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_typeArgument_return;

typedef struct RhoParser_primitiveType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_primitiveType_return;

typedef struct RhoParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_literal_return;

typedef struct RhoParser_integerLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_integerLiteral_return;

typedef struct RhoParser_booleanLiteral_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_booleanLiteral_return;

typedef struct RhoParser_expressionList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_expressionList_return;

typedef struct RhoParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_expression_return;

typedef struct RhoParser_assignmentOperator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_assignmentOperator_return;

typedef struct RhoParser_conditionalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_conditionalExpression_return;

typedef struct RhoParser_conditionalOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_conditionalOrExpression_return;

typedef struct RhoParser_conditionalAndExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_conditionalAndExpression_return;

typedef struct RhoParser_inclusiveOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_inclusiveOrExpression_return;

typedef struct RhoParser_exclusiveOrExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_exclusiveOrExpression_return;

typedef struct RhoParser_andExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_andExpression_return;

typedef struct RhoParser_equalityExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_equalityExpression_return;

typedef struct RhoParser_instanceOfExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_instanceOfExpression_return;

typedef struct RhoParser_relationalExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_relationalExpression_return;

typedef struct RhoParser_relationalOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_relationalOp_return;

typedef struct RhoParser_shiftExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_shiftExpression_return;

typedef struct RhoParser_shiftOp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_shiftOp_return;

typedef struct RhoParser_additiveExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_additiveExpression_return;

typedef struct RhoParser_multiplicativeExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_multiplicativeExpression_return;

typedef struct RhoParser_unaryExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_unaryExpression_return;

typedef struct RhoParser_unaryExpressionNotPlusMinus_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_unaryExpressionNotPlusMinus_return;

typedef struct RhoParser_selector_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_selector_return;

typedef struct RhoParser_innerCreator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_innerCreator_return;

typedef struct RhoParser_castExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_castExpression_return;

typedef struct RhoParser_parExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_parExpression_return;

typedef struct RhoParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_primary_return;

typedef struct RhoParser_lambda_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_lambda_definition_return;

typedef struct RhoParser_capture_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_capture_list_return;

typedef struct RhoParser_arg_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_arg_list_return;

typedef struct RhoParser_ident_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_ident_list_return;

typedef struct RhoParser_postfixExpression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_postfixExpression_return;

typedef struct RhoParser_creator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_creator_return;

typedef struct RhoParser_createdName_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_createdName_return;

typedef struct RhoParser_identifierSuffix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_identifierSuffix_return;

typedef struct RhoParser_arguments_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_arguments_return;

typedef struct RhoParser_rpn_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_rpn_block_return;

typedef struct RhoParser_rpn_token_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_rpn_token_return;

typedef struct RhoParser_continuation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_continuation_return;

typedef struct RhoParser_operation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    RhoParser_operation_return;



/** Context tracking structure for RhoParser
 */
struct RhoParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     RhoParser_entry_return (*entry)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_block_return (*block)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_blockStatement_return (*blockStatement)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_statement_return (*statement)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_if_block_return (*if_block)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_statementExpression_return (*statementExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_nonWildcardTypeArguments_return (*nonWildcardTypeArguments)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_typeList_return (*typeList)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_packageOrTypeName_return (*packageOrTypeName)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_typeName_return (*typeName)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_type_return (*type)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_typeArguments_return (*typeArguments)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_typeArgument_return (*typeArgument)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_primitiveType_return (*primitiveType)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_literal_return (*literal)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_integerLiteral_return (*integerLiteral)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_booleanLiteral_return (*booleanLiteral)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_expressionList_return (*expressionList)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_expression_return (*expression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_assignmentOperator_return (*assignmentOperator)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_conditionalExpression_return (*conditionalExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_conditionalOrExpression_return (*conditionalOrExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_conditionalAndExpression_return (*conditionalAndExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_inclusiveOrExpression_return (*inclusiveOrExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_exclusiveOrExpression_return (*exclusiveOrExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_andExpression_return (*andExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_equalityExpression_return (*equalityExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_instanceOfExpression_return (*instanceOfExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_relationalExpression_return (*relationalExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_relationalOp_return (*relationalOp)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_shiftExpression_return (*shiftExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_shiftOp_return (*shiftOp)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_additiveExpression_return (*additiveExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_multiplicativeExpression_return (*multiplicativeExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_unaryExpression_return (*unaryExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_unaryExpressionNotPlusMinus_return (*unaryExpressionNotPlusMinus)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_selector_return (*selector)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_innerCreator_return (*innerCreator)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_castExpression_return (*castExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_parExpression_return (*parExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_primary_return (*primary)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_lambda_definition_return (*lambda_definition)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_capture_list_return (*capture_list)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_arg_list_return (*arg_list)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_ident_list_return (*ident_list)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_postfixExpression_return (*postfixExpression)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_creator_return (*creator)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_createdName_return (*createdName)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_identifierSuffix_return (*identifierSuffix)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_arguments_return (*arguments)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_rpn_block_return (*rpn_block)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_rpn_token_return (*rpn_token)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_continuation_return (*continuation)	(struct RhoParser_Ctx_struct * ctx);
     RhoParser_operation_return (*operation)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred18_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred51_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred77_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred87_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred88_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred89_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred90_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred95_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred97_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred98_Rho)	(struct RhoParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred106_Rho)	(struct RhoParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct RhoParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pRhoParser RhoParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pRhoParser RhoParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define FloatTypeSuffix      35
#define OctalLiteral      29
#define TRACE      23
#define EOF      -1
#define BREAK      22
#define Identifier      24
#define T__93      93
#define T__94      94
#define FIELD_ACCESS      5
#define T__91      91
#define T__92      92
#define T__90      90
#define COMMENT      42
#define T__99      99
#define T__98      98
#define T__97      97
#define T__96      96
#define T__95      95
#define T__139      139
#define T__138      138
#define T__137      137
#define T__136      136
#define T__80      80
#define QUOTED_RPN_SEQUENCE      13
#define T__81      81
#define T__82      82
#define T__83      83
#define LINE_COMMENT      43
#define IntegerTypeSuffix      33
#define ELSE      16
#define ARG_LIST      7
#define T__85      85
#define T__84      84
#define ASSERT      17
#define METHOD_CALL      4
#define T__87      87
#define T__86      86
#define T__89      89
#define T__88      88
#define EMPTY      11
#define IDENT_LIST      8
#define T__126      126
#define T__125      125
#define T__128      128
#define T__127      127
#define WS      41
#define T__71      71
#define T__72      72
#define T__129      129
#define T__70      70
#define FloatingPointLiteral      25
#define JavaIDDigit      40
#define T__76      76
#define FUNCTION_CALL      6
#define T__75      75
#define T__74      74
#define T__130      130
#define Letter      39
#define EscapeSequence      36
#define T__73      73
#define T__131      131
#define T__132      132
#define T__133      133
#define T__79      79
#define T__134      134
#define T__78      78
#define T__135      135
#define T__77      77
#define RPN_SEQUENCE      12
#define T__68      68
#define T__69      69
#define T__66      66
#define T__67      67
#define T__64      64
#define T__65      65
#define T__62      62
#define T__63      63
#define T__118      118
#define CharacterLiteral      26
#define T__119      119
#define T__116      116
#define T__117      117
#define T__114      114
#define T__115      115
#define T__124      124
#define T__123      123
#define Exponent      34
#define T__122      122
#define T__121      121
#define T__120      120
#define T__61      61
#define T__60      60
#define HexDigit      32
#define IF_ELSE      15
#define IF      14
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__107      107
#define T__108      108
#define T__109      109
#define T__59      59
#define T__103      103
#define T__104      104
#define T__105      105
#define T__106      106
#define T__111      111
#define T__110      110
#define T__113      113
#define T__112      112
#define LAMBDA      20
#define EXISTS      18
#define T__50      50
#define HexLiteral      28
#define T__46      46
#define T__47      47
#define T__44      44
#define T__45      45
#define T__48      48
#define T__49      49
#define CONTINUATION      19
#define T__102      102
#define T__101      101
#define T__100      100
#define QuotedIdentifier      31
#define DecimalLiteral      30
#define StringLiteral      27
#define DEBUG_BREAK      21
#define UnicodeEscape      37
#define BLOCK      10
#define ASSIGN      9
#define OctalEscape      38
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for RhoParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
