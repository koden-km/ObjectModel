// (C) 2009 Christian.Schladetsch@Gmail.com.
// (C) 2009 Blue Lion Software Limited.

// unit-tests for compiler + executor

{
	assert(true);
	assert(!false);
	assert(1);
	assert(1 && 2);
	assert(4 + 5 == 9);
	assert(true || false);
	assert(!(false && false)); 
	assert("foo" + "bar" == "foobar");

	// the leading ` in a label makes the name resolution lazy.
	// the := operator is for definition.
	// the following statement reads "define a new object called a to be equal to an int with value 2"
	`a := 2;
	
	// similarly for b
	`b := 3;

	// and for c, with an expression
	`c := a*(1 + b);
	
	// operator = is for reassignment
	a = 3;
	assert(a == 3);
	a = a*b + c*3;
	assert(a == 3*3 + 8*3);

	// assertions
	assert(c == 8);
	
	// new `typename` creates a new type instance
	`v := new Vector;
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	assert(v.size() == 3L);
	assert(v.at(0L) == 1);
	assert(v.at(1L) == 2);
	assert(v.at(2L) == 3);
	
	// strings...
	`s := "foo";
	`b := "bar";
	assert(!s.empty());
	assert(!b.empty());
	assert(s + b == "foobar");
	
	// note the use of '6L', rather than just '6'
	// '6L' is of type size_t; '6' is type int
	// using '6' here would result in a TypeMismatch exception
	assert((s + b).size() == 6L);
	s = "";
	assert(s.empty());
	
	// aliases (like C++ pointers) are created by assigning a quoted label to another
	// here, q is an alias for p
	`q := `p;
	
	// define q to be 5
	q := 2+3;
	
	// ... meaning that p is now 5
	assert(p == 5);
	
	//foreach (v, (Q){ bin.Print(Q); })

	// to determine if an object with a given name exists in current context,
	// use the exists() operator
	assert(exists(`a));

	// delete an object
	delete a;
	assert(!exists(`a));

	`w = 3;
	assert(w == 3);
}

//EOF
